(()=>{"use strict";const e=class{regBody={email:{email:"",isValid:!1},name:{name:"",isValid:!1},password:{value:"",isValid:!1},taskName:{value:"",isValid:!1},description:{value:"",isValid:!1}};constructor(){}setValue(e,t){document.querySelector(t).addEventListener("change",(t=>{this.validateData(e,t.target.value)}))}resetForm(){document.querySelector("#_email").value="",document.querySelector("#_password").value="",document.querySelector("#_name").value=""}resetTaskForm(){document.getElementById("_taskName").value="",document.getElementById("_description").value=""}getBody(){return this.regBody}validateData(e,t){switch(document.getElementById("send-form"),e){case"email":/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(t)?(this.regBody[e]={value:t,isValid:!0},document.querySelector(".error-email").innerHTML=""):(document.querySelector(".error-email").innerHTML="Invalid Email",this.regBody[e]={value:t,isValid:!1});break;case"password":t.length>5?(this.regBody[e]=t,document.querySelector(".error-password").innerHTML="",this.regBody[e]={value:t,isValid:!0}):(document.querySelector(".error-password").innerHTML="Invalid password",this.regBody[e]={value:t,isValid:!1});break;case"name":t.length>5?(this.regBody[e]=t,document.querySelector(".error-name").innerHTML="",this.regBody[e]={value:t,isValid:!0}):(document.querySelector(".error-name").innerHTML="Your name is to short",this.regBody[e]={value:t,isValid:!1});break;case"taskName":t.length>4?(this.regBody[e]=t,document.querySelector(".error-task-name").innerHTML="",this.regBody[e]={value:t,isValid:!0}):(document.querySelector(".error-task-name").innerHTML="Your task name is to short",this.regBody[e]={value:t,isValid:!1});break;case"description":t.length>5?(this.regBody[e]=t,document.querySelector(".error-description").innerHTML="",this.regBody[e]={value:t,isValid:!0}):(document.querySelector(".error-description").innerHTML="Your description is to short. Min length 5 characters",this.regBody[e]={value:t,isValid:!1});break;default:return!1}}checkedFieldsBeforeSend(){return!(!this.regBody.email.isValid||!this.regBody.password.isValid)}},t=class{baseUrl="https://byte-tasks.herokuapp.com/api";constructor(e){this.path=e}login(t){const s={email:t.email.value,password:t.password.value};fetch(this.baseUrl+this.path,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(s)}).then((e=>e.json())).then((t=>{t&&(localStorage.setItem("token",t.token.toString()),(new e).resetForm(),window.location.href="to-do-list.html")}))}register(e){const t={email:e.email.value,name:e.name.value,password:e.password.value};fetch(this.baseUrl+this.path,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)}).then((e=>e.json())).then((e=>{e&&(localStorage.setItem("token",e.token.toString()),window.location.href="to-do-list.html")}))}logout(){localStorage.removeItem("token"),window.location.href="index.html"}},s=class{baseUrl="https://byte-tasks.herokuapp.com/api";constructor(e){this.path=e}getUser(){fetch(this.baseUrl+"/auth/user/self",{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json;charset=utf-8"}}).then((e=>e.json())).then((e=>{document.querySelector(".logo").innerHTML=`Hi, ${e.name}`,document.querySelector(".avatar").innerHTML=e.name.charAt(0).toUpperCase()}))}addTask(e){return fetch(this.baseUrl+this.path,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(e)}).then((e=>e.json()))}removeTask(e){return fetch(this.baseUrl+`/task/${e}`,{method:"Delete",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json;charset=utf-8"}})}patchRequest(e,t){return fetch(this.baseUrl+`/task/${e}`,{method:"PATCH",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)}).then((e=>e.json()))}getTasks(){return fetch(this.baseUrl+"/task",{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`,"Content-Type":"application/json;charset=utf-8"}}).then((e=>e.json())).then((e=>e))}},a=class{timerInterval=0;constructor(e,t,s){this.id=e,this.isActive=t,this.timeTracked=s}startTimer(e,t){const s=moment.utc(t),a=document.getElementById(e);this.timerInterval=setInterval((function(){s.add(1,"second"),a.querySelector(".time-tracker span").innerHTML=s.format("HH:mm:ss")}),1e3)}stopTimer(){clearInterval(this.timerInterval)}};window.onload=function(){!localStorage.getItem("token")&&document.location.href.includes("to-do-list.html")&&(document.location.href="index.html"),localStorage.getItem("token")&&document.location.href.includes("index.html")&&(document.location.href="to-do-list.html")};const i=document.getElementById("login"),r=document.querySelector("h3"),n=document.querySelector("#form-name"),o=new s,d=new class{tasks=[];timerClass=new a;constructor(){}saveList(e){this.tasks=e}getTaskList(){return this.tasks}getTask(e){const t=this.tasks.findIndex((t=>t._id===e));return this.tasks[t]}rerender(e,t){this.updateTask(e);const s=document.getElementById(e._id),a=s.querySelector(".task-title"),i=s.querySelector(".task-description"),r=s.querySelector(".time-tracker span"),n=s.querySelector(".time-tracker .timer-btn i"),o=s.querySelector(".timer-btn"),d=s.querySelector(".task-date"),l=s.querySelector(".stopTask");s.querySelector(".test-class"),"task"===t&&(!0===e.isFinished&&(a.classList.add("finished"),i.classList.add("finished"),d.classList.add("finished"),r.classList.add("finished"),l.innerHTML="Restart",o.setAttribute("disabled","disabled")),!1===e.isFinished&&(a.classList.remove("finished"),i.classList.remove("finished"),d.classList.remove("finished"),l.innerHTML="Mark as done",r.classList.remove("finished"),o.removeAttribute("disabled"))),"timer"===t&&(e.isActive&&(n.classList.remove("fa-pause"),o.classList.remove("timer-btn-stop"),n.classList.add("fa-play"),o.classList.add("timer-btn-play"),this.timerClass.stopTimer()),e.isActive||(n.classList.remove("fa-play"),o.classList.remove("timer-btn-play"),n.classList.add("fa-pause"),o.classList.add("timer-btn-stop"),this.timerClass.startTimer(e._id,e.timeTracked)))}updateTask(e){const t=this.tasks.findIndex((t=>t._id===e._id));this.tasks[t]=e}},l=new a;let c=!0;if(localStorage.getItem("token")){(new s).getUser(),new s,m();const a=new t;document.querySelector("#logout").addEventListener("click",(()=>a.logout()));const i=new e;i.setValue("taskName","#_taskName"),i.setValue("description","#_description"),document.querySelector("#saveTask").addEventListener("click",(t=>{t.preventDefault();const a=document.getElementById("_taskName"),r=document.getElementById("_description");let n;if(0===a.value.length&&0===r.value.length)n={};else{const e=i.getBody();n={name:e.taskName.value,description:e.description.value}}(new e).resetTaskForm(),new s("/task").addTask(n).then((e=>{m()}))}))}else{function s(){c=!c,i.innerText=c?"Register":"Login",r.innerText=c?"Login":"Register",c?(n.classList.add("hide"),n.classList.remove("show")):(n.classList.add("show"),n.classList.remove("hide"))}i.addEventListener("click",s);const a=new t("/auth/login"),o=new t("/auth/register"),d=new e;function l(e){e.preventDefault();const t=d.getBody();d.checkedFieldsBeforeSend()?c?a.login(t):o.register(t):alert("Errors in fields")}document.querySelector(".btn-form").addEventListener("click",(e=>{l(e)})),c?(d.setValue("email","#_email"),d.setValue("password","#_password"),d.setValue("name","#_name")):(d.setValue("email","#_email"),d.setValue("password","#_password"))}function m(){document.querySelector(".task-cards").innerHTML="",o.getTasks().then((e=>{d.saveList(e),e.forEach((e=>{!function(e){document.querySelector(".task-cards").innerHTML+=`\n            <div id=${e._id} class="task-card">\n              <h3 class="task-title ${e.isFinished?"finished":""}" isfinished="${e.isFinished}">${e.name}</h3>\n              <p class="task-description ${e.isFinished?"finished":""}">${e.description}</p>\n              <div class="time-tracker" >\n                <button ${e.isFinished?"disabled":""} ${e.isActive?'class="timer-btn timer-btn-stop"':'class="timer-btn timer-btn-play"'}>\n                  <i ${e.isActive?'class="fas fa-pause':'class="fas fa-play'}"></i></button\n                ><span ${e.isFinished?"class=finished":""}>00:00:00</span>\n              </div>\n              <p class="task-date ${e.isFinished?"finished":""}">${moment(e.createdAt).format("MM/DD/YYYY, h:mm:ss a")}</p>\n              <button  class="btn btn-form btn-small stopTask"> ${e.isFinished?"Restart":"Mark as done"}</button\n              >\n              <button  class="task-delete-btn">\n                <i class="fas fa-times"></i>\n              </button>\n            </div>`}(e)}));const t=document.querySelectorAll(".task-delete-btn"),s=document.querySelectorAll(".timer-btn"),a=document.querySelectorAll(".stopTask"),i=document.querySelectorAll(".time-tracker span");document.querySelectorAll(".timer-btn .fa-pause").forEach((e=>{const t=e.parentNode.parentNode.parentNode.getAttribute("id"),s=d.getTask(t);i.innerHTML=`${l.startTimer(s._id,s.timeTracked)}`})),t.forEach((e=>{e.addEventListener("click",(()=>{return t=e.parentNode.getAttribute("id"),void o.removeTask(t).then((()=>{document.getElementById(t).remove()}));var t}))})),s.forEach((e=>{e.addEventListener("click",(()=>function(e){console.log("clicked timer");const t=d.getTaskList(),s=t.findIndex((t=>t._id===e)),a=!t[s].isActive;o.patchRequest(e,{isActive:a}).then((e=>{d.rerender(e,"timer"),d.updateTask(e,"timer")}))}(e.parentNode.parentNode.getAttribute("id"))))})),a.forEach((e=>{e.addEventListener("click",(()=>function(e){console.log("clicked task");const t=d.getTaskList(),s=t.findIndex((t=>t._id===e)),a=t[s].isFinished;console.log("Status task in patch request",a),o.patchRequest(e,{isFinished:!a}).then((e=>{d.rerender(e,"task")}))}(e.parentNode.getAttribute("id"))))})),i.forEach((e=>{const t=e.parentNode.parentNode.getAttribute("id"),s=d.getTaskList(),a=s.findIndex((e=>e._id===t));e.innerHTML=moment.utc(s[a].timeTracked).format("HH:mm:ss")}))}))}})();